## üìÅ Projeto

### **Worms Brasil (jogo Snake multiplayer no browser)**
**Tecnologias:** HTML5 ‚Ä¢ CSS3 ‚Ä¢ JavaScript (ES6+) ‚Ä¢ Canvas API ‚Ä¢ Git/GitHub

- Estruturei o HTML sem√¢ntico e otimizado para performance de jogo.
- Modelei o mundo do jogo usando um objeto de configura√ß√£o (`GameConfig`) para definir tamanho, velocidade, respawn e limites.
- Desenvolvi o game loop em JavaScript com atualiza√ß√£o e renderiza√ß√£o cont√≠nuas no Canvas.
- Implementei detec√ß√£o de colis√£o entre segmentos de ‚Äúcobra‚Äù e itens de comida.
- Criei IA b√°sica para cobras rivais com par√¢metros independentes de velocidade e crescimento.
- Ajustei par√¢metros de c√¢mera com suaviza√ß√£o (`CAMERA_SMOOTHING`) para experi√™ncia fluida.
- Versionei o projeto no GitHub, mantendo commits at√¥micos e documenta√ß√£o no README.

---

## üß† Habilidades T√©cnicas

- **Linguagens & APIs:**  
  - JavaScript (ES6+), Canvas API  
  - HTML5 sem√¢ntico, CSS3 para layout e estiliza√ß√£o  

- **Desenvolvimento de Jogos Web:**  
  - Implementa√ß√£o de game loop (update/render)  
  - L√≥gica de movimenta√ß√£o, colis√£o e respawn  
  - IA b√°sica para entidades controladas pelo sistema  

- **Design de Arquitetura:**  
  - Configura√ß√£o orientada a dados (`GameConfig`)  
  - Separa√ß√£o de responsabilidades entre l√≥gica de jogo e renderiza√ß√£o  

- **Ferramentas & Versionamento:**  
  - Git, GitHub (Commits, Branching, README)  
  - Testes manuais cross-browser e otimiza√ß√£o de performance  

- **UX & Performance:**  
  - Suaviza√ß√£o de c√¢mera e responsividade do canvas  
  - Otimiza√ß√£o de assets e par√¢metros para carregamento r√°pido




# Configura√ß√µes Chave de Gameplay (em script.js)

Estas s√£o as configura√ß√µes no objeto `GameConfig` (arquivo `script.js`) que voc√™ pode modificar para alterar significativamente a experi√™ncia de jogo.

## Mundo e Ambiente
- Linha 2: `WORLD_WIDTH: 3000` - Largura total do mapa. Afeta o espa√ßo dispon√≠vel.
- Linha 3: `WORLD_HEIGHT: 3000` - Altura total do mapa.
- Linha 16: `BOUNDS_THICKNESS: 190` - Espessura da "neblina" na borda. Valores maiores reduzem a √°rea vis√≠vel perto das bordas.

## Cobra do Jogador
- Linha 4: `PLAYER_SPEED: 100` - Velocidade base do jogador.
- Linha 5: `PLAYER_BOOST_SPEED: 150` - Velocidade do jogador ao usar o boost (clique do mouse).
- Linha 17: `INITIAL_SNAKE_LENGTH: 30` - Comprimento inicial da cobra do jogador.
- *Nota: O quanto a cobra do jogador cresce por comida √© definido na linha ~178 (`snake.targetLength += 5`)*

## Cobras Rivais (IA)
- Linha 6: `RIVAL_SPEED: 100` - Velocidade das cobras controladas pela IA.
- Linha 19: `RIVAL_COUNT: 10` - Quantidade de cobras rivais no jogo. Aumenta a dificuldade.
- *Nota: O quanto as cobras rivais crescem por comida √© definido na linha ~241 (`rival.targetLength += 2`)*

## Caracter√≠sticas das Cobras (Jogador e Rivais)
- Linha 7: `SNAKE_SEGMENT_RADIUS: 9` - Grossura (raio) inicial das cobras.
- Linha 8: `MAX_SNAKE_RADIUS: 9 * 2.5` - Grossura m√°xima que uma cobra pode atingir ao comer.
- Linha 9: `SNAKE_TURN_SPEED: Math.PI * 2.0` - Agilidade das cobras para virar (valores maiores = mais √°gil).
- Linha 20: `RESPAWN_DELAY: 3` - Tempo (segundos) para uma cobra reaparecer ap√≥s morrer.

## Comida
- Linha 10: `FOOD_RADIUS: 7` - Tamanho (raio) dos itens de comida.
- Linha 11: `INITIAL_FOOD_COUNT: 450` - Quantidade inicial de comida no mapa.
- Linha 12: `MAX_FOOD_COUNT: 600` - Limite m√°ximo de itens de comida no mapa.
- Linha 13: `FOOD_SPAWN_RATE: 0.5` - Rapidez com que nova comida surge (itens/segundo).

## C√¢mera
- Linha 18: `CAMERA_SMOOTHING: 0.2` - Suavidade do movimento da c√¢mera (0 = sem suaviza√ß√£o, 1 = muito lenta). Valores menores (ex: 0.1) deixam a c√¢mera mais responsiva.

*(Configura√ß√µes visuais como `FOOD_COLORS` e `BOUNDS_COLOR` foram omitidas por terem menor impacto direto na gameplay)*
